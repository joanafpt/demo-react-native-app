{"version":3,"sources":["images/initAndroid.jpg","images/ecra_pf_aguarde_android.png","images/ecra_dropdown_android.png","images/chamda_api_android.png","images/resposta_api_android.png","images/menu_inicial_ios.png","images/pf_aguarde_ios.png","images/dropdown_ios.png","images/chamada_api_ios.png","images/resp_servidor_ios.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","id","src","init","alt","wait","loadedList","chamadaAPiAndroid","respServidorAndroid","initiOS","waitiOS","loadedListiOS","chamadaAPiiOS","respServidoriOS","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0EAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,qD,gBCA3CD,EAAOC,QAAU,IAA0B,mD,gBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,kD,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,yUC0H5BC,MAlGf,WACE,OACE,yBAAKC,UAAU,OAEb,4BAAQA,UAAU,aAAaC,GAAG,SAAlC,0BAEA,yBAAKD,UAAU,aAEb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SAASC,GAAG,gBACzB,yBAAKD,UAAU,OACb,wCAGF,yBAAKA,UAAU,aAAf,wBAEA,yBAAKA,UAAU,SAAf,IAAwB,yBAAKE,IAAKC,IAAMC,IAAI,oBAA5C,KAEA,yBAAKJ,UAAU,QAAf,qCAGA,yBAAKA,UAAU,SAAf,KAAyB,yBAAKE,IAAKG,IAAMD,IAAI,oBAA7C,KAEA,yBAAKJ,UAAU,QAAf,0DAGA,yBAAKA,UAAU,SAAf,KAAyB,yBAAKE,IAAKI,IAAYF,IAAI,kBAAnD,KAGA,yBAAKJ,UAAU,QAAf,kGAEA,yBAAKA,UAAU,SAAf,IAAwB,yBAAKE,IAAKK,IAAmBH,IAAI,kBAAzD,KAGA,yBAAKJ,UAAU,QAAf,gEAEA,yBAAKA,UAAU,SAAf,KAAyB,yBAAKE,IAAKM,IAAqBJ,IAAI,oBAS9D,yBAAKJ,UAAU,SAASC,GAAG,YACzB,yBAAKD,UAAU,OACb,oCAIF,yBAAKA,UAAU,aAAf,sBAEA,yBAAKA,UAAU,SAAQ,yBAAKE,IAAKO,IAASL,IAAI,qBAG9C,yBAAKJ,UAAU,QAAf,qCACA,yBAAKA,UAAU,SAAQ,yBAAKE,IAAKQ,IAASN,IAAI,qBAG9C,yBAAKJ,UAAU,QAAf,0DACA,yBAAKA,UAAU,SAAQ,yBAAKE,IAAKS,IAAeP,IAAI,qBAGpD,yBAAKJ,UAAU,QAAf,4FACA,yBAAKA,UAAU,SAAQ,yBAAKE,IAAKU,IAAeR,IAAI,qBAEpD,yBAAKJ,UAAU,QAAf,2DACA,yBAAKA,UAAU,SAAQ,yBAAKE,IAAKW,IAAiBT,IAAI,wBAqB5D,4BAAQJ,UAAU,cAAlB,WAAuC,uBAAGA,UAAU,YAClDc,KAAK,8BACLC,OAAO,SACPC,IAAI,uBAHiC,kBAAvC,SCrGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5d31e7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/initAndroid.ed42e9b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ecra_pf_aguarde_android.032f888c.png\";","module.exports = __webpack_public_path__ + \"static/media/ecra_dropdown_android.98dddba4.png\";","module.exports = __webpack_public_path__ + \"static/media/chamda_api_android.99e578aa.png\";","module.exports = __webpack_public_path__ + \"static/media/resposta_api_android.16873699.png\";","module.exports = __webpack_public_path__ + \"static/media/menu_inicial_ios.9076eda8.png\";","module.exports = __webpack_public_path__ + \"static/media/pf_aguarde_ios.dbadbd25.png\";","module.exports = __webpack_public_path__ + \"static/media/dropdown_ios.894012b8.png\";","module.exports = __webpack_public_path__ + \"static/media/chamada_api_ios.5ae0493a.png\";","module.exports = __webpack_public_path__ + \"static/media/resp_servidor_ios.bfbd974c.png\";","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n/*IMAGENS ANDROID */\nimport init from './images/initAndroid.jpg';\nimport wait from './images/ecra_pf_aguarde_android.png';\nimport loadedList from './images/ecra_dropdown_android.png'\nimport chamadaAPiAndroid from './images/chamda_api_android.png';\nimport respServidorAndroid from './images/resposta_api_android.png';\n\n\n/*IMAGENS IOS */\n\nimport initiOS from './images/menu_inicial_ios.png';\nimport waitiOS from './images/pf_aguarde_ios.png';\nimport loadedListiOS from './images/dropdown_ios.png'\nimport chamadaAPiiOS from './images/chamada_api_ios.png';\nimport respServidoriOS from './images/resp_servidor_ios.png';\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <header className=\"App-header\" id=\"hello\">Demo app React Native </header>\n\n      <div className=\"container\">\n\n        <div className=\"row\">\n          <div className=\"col-sm\" id=\"menu-android\">\n            <div className=\"row\">\n              <h2>Android</h2>\n            </div>\n\n            <div className=\"show-init\">\n              Ecrã inicial:    </div>\n            <div className=\"image\"> <img src={init} alt=\"ecrã-inicial\" /> </div>\n\n            <div className=\"show\">\n              Carregar dropdown via chamada API\n              </div>\n            <div className=\"image\">  <img src={wait} alt=\"ecrã-inicial\" /> </div>\n\n            <div className=\"show\">\n              Lista carregada para seleção do item a pesquisar\n            </div>\n            <div className=\"image\">  <img src={loadedList} alt=\"lista_selecao\" /> </div>\n\n\n            <div className=\"show\">\n              Chamada à API em execução para retornar informações sobre item pesquisado      </div>\n            <div className=\"image\"> <img src={chamadaAPiAndroid} alt=\"lista_selecao\" /> </div>\n\n\n            <div className=\"show\">\n              Resposta do servidor com as informações coletadas     </div>\n            <div className=\"image\">  <img src={respServidorAndroid} alt=\"lista_selecao\" /></div>\n\n\n          </div>\n\n\n\n\n\n          <div className=\"col-sm\" id=\"menu-ios\">\n            <div className=\"row\">\n              <h2>iOS</h2>\n            </div>\n\n\n            <div className=\"show-init\">\n              Ecrã inicial:  </div>\n            <div className=\"image\"><img src={initiOS} alt=\"ecrã-inicial\" /></div>\n\n\n            <div className=\"show\">Carregar dropdown via chamada API</div>\n            <div className=\"image\"><img src={waitiOS} alt=\"ecrã-inicial\" /></div>\n\n\n            <div className=\"show\">Lista carregada para seleção do item a pesquisar</div>\n            <div className=\"image\"><img src={loadedListiOS} alt=\"ecrã-inicial\" /></div>\n\n\n            <div className=\"show\">Chamada à API em execução para retornar informações sobre item pesquisado</div>\n            <div className=\"image\"><img src={chamadaAPiiOS} alt=\"ecrã-inicial\" /></div>\n\n            <div className=\"show\">Resposta do servidor com as informações coletadas</div>\n            <div className=\"image\"><img src={respServidoriOS} alt=\"ecrã-inicial\" /></div>\n\n\n\n\n          </div>\n        </div>\n\n\n\n\n\n\n\n\n\n\n\n      </div>\n\n\n      <footer className=\"App-footer\">        <a className=\"link-link\"\n        href=\"https://github.com/joanafpt\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >Joana Teixeira</a>   </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}